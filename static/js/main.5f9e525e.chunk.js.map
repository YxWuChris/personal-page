{"version":3,"sources":["headBackground.jpg","serviceWorker.js","Profile.jsx","NavigateBar.jsx","AboutMe.jsx","MainPage.jsx","index.jsx"],"names":["module","exports","Boolean","window","location","hostname","match","useStyles","makeStyles","Name","marginTop","fontFamily","fontSize","marginLeft","Intro","UW","color","purple","Profile","classes","className","href","NaviRoot","backgroundImage","headBackground","backgroundSize","height","NaviName","width","marginRight","display","NaviButton","ContactButton","NavigateBar","React","useState","Button","variant","AboutMeWords","DownloadButton","AboutMe","root","MainPage","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,4C,0ICYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oCCdAC,EAAYC,YAAW,CACzBC,KAAM,CACFC,UAAU,IACVC,WAAY,SACZC,SAAU,GACVC,WAAY,KAEhBC,MAAM,CACFH,WAAY,SACZC,SAAU,GACVC,WAAY,IACZH,UAAU,KAEdK,GAAG,CACCH,SAAS,GACTD,WAAY,SACZE,WAAY,IACZG,MAAOC,OAgBAC,EAZC,WACZ,IAAMC,EAAUZ,IAEhB,OACI,oCACI,yBAAKa,UAAWD,EAAQV,MAAxB,4BACA,yBAAKW,UAAWD,EAAQL,OAAxB,gDACA,yBAAKM,UAAWD,EAAQJ,IAAxB,IAA6B,uBAAGM,KAAM,8BAAT,iC,iBC1BnCd,EAAYC,YAAW,CACzBc,SAAS,CACLC,gBAAgB,OAAD,OAAQC,IAAR,KACfC,eAAgB,QAChBC,OAAO,KAEXC,SAAU,CACNC,MAAO,IACPjB,WAAY,YACZD,UAAW,GACXG,WAAY,IACZgB,YAAY,IACZC,QAAS,UAEbC,WAAY,CACRH,MAAO,IACPlB,UAAW,GACXC,WAAY,aAEhBqB,cAAc,CACVtB,UAAW,GACXG,WAAW,OAoBJoB,EAhBK,WAChB,IAAMd,EAAUZ,IADM,EAEI2B,IAAMC,SAAS,GAFnB,6BAItB,OAAQ,yBAAKf,UAAWD,EAAQG,UAC5B,wBAAIF,UAAWD,EAAQQ,UAAvB,aACA,kBAACS,EAAA,EAAD,CAAQhB,UAAWD,EAAQY,YAA3B,QACA,kBAACK,EAAA,EAAD,CAAQhB,UAAWD,EAAQY,YAA3B,YACA,kBAACK,EAAA,EAAD,CAAQhB,UAAWD,EAAQY,YAA3B,YACA,kBAACK,EAAA,EAAD,CAAQhB,UAAWD,EAAQY,YAA3B,cACA,kBAACK,EAAA,EAAD,CAAQC,QAAQ,YAAhB,cACA,kBAAC,EAAD,QCtCF9B,EAAYC,YAAW,CACzB8B,aAAa,CACT5B,UAAU,IACVG,WAAW,IACXe,MAAM,IACNjB,WAAW,SACXK,MAAM,UACNJ,SAAS,IAEb2B,eAAe,CACX1B,WAAW,OAuBJ2B,EAlBC,WACZ,IAAMrB,EAAUZ,IAEhB,OACI,oCACI,yBAAKa,UAAWD,EAAQmB,cACxB,yKACI,gWAIJ,yBAAKlB,UAAWD,EAAQoB,gBACxB,kBAACH,EAAA,EAAD,CAAQC,QAAQ,YAAhB,kBC1BN9B,EAAYC,YAAW,CACzBiC,KAAM,CACFf,OAAO,OAeAgB,EAXA,WACf,IAAMvB,EAAUZ,IAEhB,OACI,yBAAKa,UAAWD,EAAQsB,MACpB,kBAAC,EAAD,MACA,kBAAC,EAAD,QCXRE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SLyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5f9e525e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/headBackground.a1820fba.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { purple } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles({\n    Name: {\n        marginTop:200,\n        fontFamily: 'Optima',\n        fontSize: 50,\n        marginLeft: 200,\n    },\n    Intro:{\n        fontFamily: 'Optima',\n        fontSize: 40,\n        marginLeft: 200,\n        marginTop:100,\n    },\n    UW:{\n        fontSize:40,\n        fontFamily: 'Optima',\n        marginLeft: 200,\n        color: purple,\n    },\n});\n\nconst Profile = () => {\n    const classes = useStyles();\n\n    return(\n        <>\n            <div className={classes.Name}>Hi There, I am Chris Wu </div> \n            <div className={classes.Intro}>A computer science student and Web Developer</div>\n            <div className={classes.UW}> <a href={'http://www.washington.edu/'}>@ University of Washington</a></div>\n        </>\n    )\n}\n\nexport default Profile","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button } from '@material-ui/core';\nimport Profile from './Profile'\nimport headBackground from './headBackground.jpg'\n\nconst useStyles = makeStyles({\n    NaviRoot:{\n        backgroundImage:`url(${headBackground})`,\n        backgroundSize: 'cover',\n        height:800\n    },\n    NaviName: {\n        width: 200,\n        fontFamily: 'Open Sans',\n        marginTop: 50,\n        marginLeft: 200,\n        marginRight:100,\n        display: 'inline',\n    },\n    NaviButton: {\n        width: 200,\n        marginTop: 50,\n        fontFamily: 'Open Sans'\n    },\n    ContactButton:{\n        marginTop: 50,\n        marginLeft:300,\n    }\n});\n\nconst NavigateBar = () => {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n\n    return (<div className={classes.NaviRoot}>\n        <h2 className={classes.NaviName}>CHRIS WU.</h2>\n        <Button className={classes.NaviButton}>Home</Button>\n        <Button className={classes.NaviButton}>About Me</Button>\n        <Button className={classes.NaviButton}>Projects</Button>\n        <Button className={classes.NaviButton}>Experience</Button>\n        <Button variant=\"outlined\">Contact Me</Button>\n        <Profile />\n    </div>\n    );\n}\n\nexport default NavigateBar","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    AboutMeWords:{\n        marginTop:100,\n        marginLeft:200,\n        width:800,\n        fontFamily:'Optima',\n        color:'#3a3e3c',\n        fontSize:30\n    },\n    DownloadButton:{\n        marginLeft:200,\n    }\n})\n\n\nconst AboutMe = () => {\n    const classes = useStyles();\n\n    return (\n        <>\n            <div className={classes.AboutMeWords}>\n            <p>After I got my computer science Becholer degree from University of Nottingham, I went to USA continue studying and seeking a full-time job</p>\n                <p> Now I am working a Full Stack Web Developer at University of Washington, College affordability group.\n                    Foucusing on the Data visulization website front-end design and Server Sider Data presetation and Model\n                    Layer. Before this contract, I been working as Software/Data engineer at serveral famous Tech companies as intern</p>\n            </div>\n            <div className={classes.DownloadButton}>\n            <Button variant=\"outlined\">Download CV</Button>\n            </div>\n        </>\n    )\n}\n\nexport default AboutMe","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport NavigateBar from './NavigateBar';\nimport AboutMe from './AboutMe'\n\nconst useStyles = makeStyles({\n    root: {\n        height:2000\n    }\n  });\n\nconst MainPage=()=>{\nconst classes = useStyles();\n\nreturn(\n    <div className={classes.root}>\n        <NavigateBar />\n        <AboutMe />\n    </div>\n)\n}\n\nexport default MainPage","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport MainPage from './MainPage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}